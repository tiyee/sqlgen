// Code generated by goyacc -l -o outt.go qs.y. DO NOT EDIT.
package v4

import __yyfmt__ "fmt"

type yySymType struct {
	yys    int
	offset int // offset
	ident  string

	fieldType         FieldType
	i                 int
	columnStmt        ColumnStmt
	columnsStmt       []ColumnStmt
	fieldOptStmt      FieldOptStmt
	tableStmt         TableStmt
	fieldCommentExpr  FieldComment
	fieldTypeExpr     FieldTypeExpr
	fieldDefault      FieldDefault
	fieldNameIdenList []string
	indexStmt         IndexStmt
	indexListStmt     []IndexStmt
	tableOptStmt      TableOptStmt
}

const tString = 57346
const IndexName = 57347
const tNumber = 57348
const kwUnsigned = 57349
const kwNOT = 57350
const kwNull = 57351
const kwAutoIncrement = 57352
const kwCharacter = 57353
const kwCharset = 57354
const kwSet = 57355
const kwComment = 57356
const kwDefault = 57357
const kwTable = 57358
const kwCreate = 57359
const kwCollate = 57360
const kwCurrentTimestamp = 57361
const kwOn = 57362
const kwUpdate = 57363
const kwEngine = 57364
const kwInnoDB = 57365
const kwPrimary = 57366
const kwKey = 57367
const kwUnique = 57368
const LPAREN = 57369
const LBRACK = 57370
const LBRACE = 57371
const COMMA = 57372
const PERIOD = 57373
const RPAREN = 57374
const RBRACK = 57375
const RBRACE = 57376
const SEMICOLON = 57377
const EQ = 57378
const QUOTE = 57379
const DQUOTE = 57380
const TILDE = 57381
const tFieldType = 57382

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"tString",
	"IndexName",
	"tNumber",
	"kwUnsigned",
	"kwNOT",
	"kwNull",
	"kwAutoIncrement",
	"kwCharacter",
	"kwCharset",
	"kwSet",
	"kwComment",
	"kwDefault",
	"kwTable",
	"kwCreate",
	"kwCollate",
	"kwCurrentTimestamp",
	"kwOn",
	"kwUpdate",
	"kwEngine",
	"kwInnoDB",
	"kwPrimary",
	"kwKey",
	"kwUnique",
	"LPAREN",
	"'('",
	"LBRACK",
	"\"[\"",
	"LBRACE",
	"\"{\"",
	"COMMA",
	"\",\"",
	"PERIOD",
	"\".\"",
	"RPAREN",
	"')'",
	"RBRACK",
	"\"]\"",
	"RBRACE",
	"\"}\"",
	"SEMICOLON",
	"\";\"",
	"EQ",
	"\"=\"",
	"QUOTE",
	"DQUOTE",
	"TILDE",
	"\"`\"",
	"tFieldType",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 103

var yyAct = [...]int8{
	13, 88, 29, 77, 27, 15, 8, 96, 78, 43,
	16, 69, 68, 67, 66, 45, 44, 4, 79, 20,
	22, 21, 94, 38, 90, 87, 80, 34, 18, 95,
	25, 35, 17, 20, 22, 21, 37, 50, 53, 71,
	54, 52, 42, 36, 9, 11, 64, 31, 76, 23,
	14, 7, 33, 70, 97, 72, 93, 99, 3, 30,
	48, 5, 74, 73, 51, 46, 49, 81, 82, 39,
	65, 47, 89, 55, 57, 56, 58, 59, 63, 92,
	91, 62, 86, 85, 60, 84, 83, 75, 40, 28,
	10, 1, 32, 24, 61, 26, 89, 98, 19, 12,
	41, 2, 6,
}

var yyPact = [...]int16{
	41, -1000, -26, 45, -1000, 2, 17, 86, -1000, 1,
	-39, -5, 16, -47, 85, -1000, -1000, 37, -10, -2,
	18, 11, 1, 1, -1000, 84, -1000, 15, -40, -1000,
	-29, -30, 53, 48, 37, 9, 14, 1, 13, -1000,
	-1000, 66, 72, -1000, 23, 64, -31, -32, -33, -34,
	-1000, -1000, 1, 12, 1, -1000, -1000, 54, -1000, 49,
	83, -1000, -1, -11, 37, 37, 82, 81, 79, 78,
	-12, 1, -13, -1000, 76, -1000, 75, -1000, -1000, 36,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -15, -4,
	-1000, -1000, -42, 33, -1000, 1, -1000, 38, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 102, 0, 101, 100, 99, 98, 45, 28, 95,
	94, 93, 1, 92, 2, 91,
}

var yyR1 = [...]int8{
	0, 15, 3, 3, 3, 1, 1, 7, 7, 7,
	5, 5, 9, 9, 4, 4, 4, 4, 4, 4,
	4, 4, 10, 10, 10, 10, 10, 11, 8, 8,
	8, 6, 6, 6, 12, 12, 2, 2, 14, 14,
	14, 14, 13, 13, 13, 13,
}

var yyR2 = [...]int8{
	0, 1, 2, 7, 8, 3, 1, 1, 2, 3,
	2, 3, 4, 1, 0, 2, 2, 3, 2, 4,
	3, 2, 4, 2, 2, 2, 5, 2, 1, 2,
	3, 5, 6, 5, 1, 3, 3, 1, 4, 4,
	1, 0, 4, 4, 4, 4,
}

var yyChk = [...]int16{
	-1000, -15, -3, 17, 43, 16, -1, 49, 4, 27,
	4, -7, -5, -2, 49, 4, 49, 37, -8, -6,
	24, 26, 25, 33, -11, 14, -9, 51, 4, -14,
	22, 10, -13, 15, 37, 33, 25, 25, -2, -7,
	4, -4, 27, 49, 45, 45, 12, 18, 12, 18,
	-14, -8, 27, -2, 27, 7, 9, 8, 10, 11,
	18, -10, 15, 6, 23, 6, 45, 45, 45, 45,
	-2, 27, -2, 9, 13, 4, 49, 4, 9, 19,
	37, -14, -14, 4, 4, 4, 4, 37, -12, -2,
	37, 4, 4, 20, 37, 33, 49, 21, -12, 19,
}

var yyDef = [...]int8{
	0, -2, 1, 0, 2, 0, 0, 0, 6, 0,
	0, 0, 7, 0, 0, 37, 5, 41, 0, 28,
	0, 0, 0, 8, 10, 0, 14, 13, 0, 3,
	0, 0, 40, 0, 41, 29, 0, 0, 0, 9,
	27, 11, 0, 36, 0, 0, 0, 0, 0, 0,
	4, 30, 0, 0, 0, 15, 16, 0, 18, 0,
	0, 21, 0, 0, 41, 41, 0, 0, 0, 0,
	0, 0, 0, 17, 0, 20, 0, 23, 24, 25,
	12, 38, 39, 44, 45, 42, 43, 31, 0, 34,
	33, 19, 0, 0, 32, 0, 22, 0, 35, 26,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	28, 38, 3, 3, 34, 3, 36, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 44,
	3, 46, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 30, 3, 40, 3, 3, 50, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 32, 3, 42,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 29, 31, 33, 35,
	37, 39, 41, 43, 45, 47, 48, 49, 51,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yylex.(*lex).Stmt = yyDollar[1].tableStmt
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableStmt = yyDollar[1].tableStmt
		}
	case 3:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.tableStmt = TableStmt{action: "create", tableName: yyDollar[3].ident, columns: yyDollar[5].columnsStmt, opt: yyDollar[7].tableOptStmt}
		}
	case 4:
		yyDollar = yyS[yypt-8 : yypt+1]
		{
			yyVAL.tableStmt = TableStmt{action: "create", tableName: yyDollar[3].ident, columns: yyDollar[5].columnsStmt, indexes: yyDollar[6].indexListStmt, opt: yyDollar[8].tableOptStmt}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.ident = yyDollar[2].ident
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ident = yyDollar[1].ident
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnsStmt = []ColumnStmt{yyDollar[1].columnStmt}
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.columnsStmt = []ColumnStmt{yyDollar[1].columnStmt}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[3].columnsStmt = append(yyDollar[3].columnsStmt, yyDollar[1].columnStmt)
			yyVAL.columnsStmt = yyDollar[3].columnsStmt
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		{

			yyDollar[1].columnStmt.Cm = yyDollar[2].fieldCommentExpr
			yyVAL.columnStmt = yyDollar[1].columnStmt

		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
		{

			yyVAL.columnStmt = ColumnStmt{t: 1, tp: yyDollar[2].fieldTypeExpr, opts: yyDollar[3].fieldOptStmt, name: yyDollar[1].ident}

		}
	case 12:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.fieldTypeExpr = NewFieldTypeExpr(yyDollar[1].fieldType, yyDollar[3].i)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.fieldTypeExpr = NewFieldTypeExpr(yyDollar[1].fieldType, 0)
		}
	case 14:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.fieldOptStmt = NewFieldOptStmt()
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[1].fieldOptStmt.SetOpt(optUnsigned)
			yyVAL.fieldOptStmt = yyDollar[1].fieldOptStmt
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[1].fieldOptStmt.SetOpt(optNull)
			yyVAL.fieldOptStmt = yyDollar[1].fieldOptStmt
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].fieldOptStmt.SetOpt(optNotNull)
			yyVAL.fieldOptStmt = yyDollar[1].fieldOptStmt
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[1].fieldOptStmt.SetOpt(optAutoIncrement)
			yyVAL.fieldOptStmt = yyDollar[1].fieldOptStmt
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyDollar[1].fieldOptStmt.SetOpt(optCharacterSet)
			yyDollar[1].fieldOptStmt.character = yyDollar[4].ident
			yyVAL.fieldOptStmt = yyDollar[1].fieldOptStmt
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[1].fieldOptStmt.SetOpt(optCollate)
			yyDollar[1].fieldOptStmt.collate = yyDollar[3].ident
			yyVAL.fieldOptStmt = yyDollar[1].fieldOptStmt
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[1].fieldOptStmt.SetDefault(yyDollar[2].fieldDefault)
			yyVAL.fieldOptStmt = yyDollar[1].fieldOptStmt
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.fieldDefault = FieldDefault{s: yyDollar[3].ident}
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.fieldDefault = FieldDefault{s: yyDollar[2].ident}
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.fieldDefault = FieldDefault{s: "null", opt: optDefaultNull}
		}
	case 25:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.fieldDefault = FieldDefault{s: "kwCurrentTimestamp", opt: optDefaultCurrentTimestamp}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.fieldDefault = FieldDefault{s: "kwCurrentTimestamp on UPDATE", opt: optOnUpdCurrentTs}
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.fieldCommentExpr = FieldComment{s: yyDollar[2].ident}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.indexListStmt = []IndexStmt{yyDollar[1].indexStmt}
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.indexListStmt = []IndexStmt{yyDollar[1].indexStmt}
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.indexListStmt = append(yyDollar[3].indexListStmt, yyDollar[1].indexStmt)
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.indexStmt = IndexStmt{t: "primary", cols: []string{yyDollar[4].ident}}
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.indexStmt = IndexStmt{t: "unique", name: yyDollar[3].ident, cols: yyDollar[5].fieldNameIdenList}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.indexStmt = IndexStmt{t: "key", name: yyDollar[2].ident, cols: []string{yyDollar[4].ident}}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.fieldNameIdenList = []string{yyDollar[1].ident}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyDollar[3].fieldNameIdenList = append(yyDollar[3].fieldNameIdenList, yyDollar[1].ident)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.ident = yyDollar[2].ident
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.ident = yyDollar[1].ident
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyDollar[4].tableOptStmt.engine = "innodb"
			yyVAL.tableOptStmt = yyDollar[4].tableOptStmt
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyDollar[4].tableOptStmt.autoIncrement = yyDollar[3].i
			yyVAL.tableOptStmt = yyDollar[4].tableOptStmt
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableOptStmt = TableOptStmt{defaults: yyDollar[1].fieldNameIdenList}
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.tableOptStmt = TableOptStmt{}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.fieldNameIdenList = []string{"charset", yyDollar[4].ident}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.fieldNameIdenList = []string{"collate", yyDollar[4].ident}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.fieldNameIdenList = append(yyDollar[1].fieldNameIdenList, "charset", yyDollar[4].ident)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.fieldNameIdenList = append(yyDollar[1].fieldNameIdenList, "collate", yyDollar[4].ident)
		}
	}
	goto yystack /* stack new state and value */
}
